### UNDERSTANDING CONTAINERIZATION TECHNOLOGY USING DOCKERS ###

1. CONTAINER: A container is a way to package application with all the necessary dependencies and configurations

2. CONTAINER REPOSITORY: A special type of storage for containers eg Docker hub (a public container repository)for docker containers.

* Before now, when developing applications, we had to install all dependencies on the server or OS for it to run on that our local. But with containers, we avoid that stress because the container gives us like "It's own isolated operating system layer, with Linux based image." So this way, we have the application packaged with the proper dependencies in the container. So this way, we use same docker commands.

* You could have different version of the same application running on your local system without any conflict. Since the other runs in the containerized environment.

* Containers help eliminate the need for environmental configuration that needs to be set on the server before an application can run. Except for Docker Runtime to be set onetime on the server.

* NB: Docker is one of the most popular implementation of containers. Other implementations include container d, cri-o, etc.


3. Technically, containers are layers of images, with mostly Linux base image (alpine.3.0) because it is small in size.

4. Install docker following the guide from ubuntu: https://docs.docker.com/engine/install/ubuntu/
	You can confirm the version installed by running:
=> docker --version 		##Ref = img 1		

5. To pull a docker image we use
=> docker pull <image name>
eg: => docker pull postgres 		## This will download the latest version if no version is specified. But if not, we can add the version we want to pull.

=> docker pull <image name>:<version number>
eg:  => docker pull postgres:15.8

6. To see all the available docker images
=> docker images

7. To run a docker image we use the "docker run <image name>:<version> eg
=> docker run -d -e POSTGRES_PASSWORD=password postgres 		## Sometimes we might need to specify some extra stuffs.

8. To get help for docker or docker commands, we use
=> docker --help		## for docker commands info
=> docker <command> --help 	## for specific commands help

9. To see all containers we run
=> docker ps 		### for running containers
=> docker ps -a 	### For both running, stoped and failed containers

*** NOTE: 
Image is the actual package that consist of the application, configuration, dependencies, start script, etc. The image is more like the artifact that is moved from the remote repository (eg docker hub).

Container is when the image is pulled to the local machine and started. So container is a running image on a local server. This create the container environment.

10. OS vs VirtualBox vs Docker.

i. OS has two major layer (a) The OS Kernel - This communicate with the hardware and application. like the middle man to aid communication. (b) The application layer, where applications are. They run on the kernel layer.

ii. Docker virtualizes the application layer of an Operating system. And it uses the kernel on the host OS, as it does not have it own kernel.

iii. Virtual machine or Virtual box virtualizes both the Application and OS kernel of an Operating system. So it uses the Host hardware to boot and not the host OS.

11. Docker Architecture: When we install docker, we actually install a docker engine which consist of 3 major components. 
i. Docker Server: For pulling images and managing images and containers
ii. Docker API: For interacting with the docker server
iii. Docker CLI: to execute docker commands against the server.

12. CONTAINER vs IMAGE
## Container: Is a part of the container runtime. It is basically the running environment for an IMAGE
## Image: This is the packaged non-running container. Just like an artifact.

13. DOCKER BASIC COMMANDS
a. docker pull <image name>	=> to download an image from docker hub
b. docker pull <image name>:<version number>	=> to download a particular image version from docker hub
c. docker images	=> to show the list of all images 
d. docker run <image name> 	=> To run an image as a container in an attached mode. If image don't exist, it will pull and run it.
e. docker run -d <image name> 	=> To run the container in a detached mode (more like background)
f. docker stop <container id>	=> to stop a running container
g. docker start <container id>	=> to start a stopped container
h. docker ps 		=> to see all running containers
i. docker ps -a 	=> to see all running and stopped containers
j. docker run -p<host port>:<container port> <image name>  => to bind a port on the host to that of a container
# eg:   docker run -d -p6001:6746 postgress

k. docker logs <container id> 	=> to get the logs of a container
l. docker logs <container name>	=> to get the logs of the container

#eg: docker logs objective_joliot

m. docker run --name <container name> <image name>	=> This is used to give the container a specific name rather than a random name

n. docker rm <container id>  	=>  To delete a container

o. docker rmi <image id> 	=> To delete an image.

p. docker exec -it <container id> /bin/bash	=> To enter into the docker Interactive environment and carry out some tasks or functions.

######## when done with the docker env you use "exit" to return to your normal terminal.
q. docker exec -it <container name> /bin/bash 	=> This also opens up the docker environment

r. docker start <container name>    => to start a container if you gave it a name








14. DOCKER TROUBLESHOOTING COMMANDS



